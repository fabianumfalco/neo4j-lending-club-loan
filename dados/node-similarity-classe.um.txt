// limpar dados
MATCH (n)
DETACH DELETE n;

// carregar CSV e criar nós e relacionamentos relativos a soft information Employment length 
LOAD CSV WITH HEADERS FROM 'file:///classe.um.soft.csv'
AS row
MERGE (b:Borrower {borrowerId: row.borrower_id})MERGE (:Borrower {borrowerId: row.borrower_id})
MERGE (s1:SoftInfo {SoftInfoId: 'EL-'+row.emp_length,type: "EmpLength", value: row.emp_length})
MERGE (s2:SoftInfo {SoftInfoId: 'HO-'+row.home_ownership, type: "homeOwnership", value: row.home_ownership})
MERGE (s3:SoftInfo {SoftInfoId: 'VS-'+row.verification_status, type: "verificationStatus", value: row.verification_status})
MERGE (s4:SoftInfo {SoftInfoId: 'AS-'+row.addr_state, type: "addressState", value: row.addr_state})
MERGE (b)<-[:SOFT_FROM]-(s1)
MERGE (b)<-[:SOFT_FROM]-(s2)
MERGE (b)<-[:SOFT_FROM]-(s3)
MERGE (b)<-[:SOFT_FROM]-(s4);

// limpar grafo projetado - https://neo4j.com/docs/graph-data-science/current/graph-drop/
CALL gds.graph.drop('myGraph') YIELD graphName;

// criar grafo projetado - https://neo4j.com/docs/graph-data-science/current/graph-project/
// com nós SoftInfo e Borrower e com o relacionamento SOFT_FROM:
//     graphName - myGraph
//     nodeCount - 7110
//     relationshipCount - 28376
//     projectMillis - 318
CALL gds.graph.project(
    'myGraph',
    ['SoftInfo', 'Borrower'],
    {
        SOFT_FROM: {
            type: 'SOFT_FROM',
            properties: {
                strength: {
                    property: 'strength',
                    defaultValue: 1.0
                }
            }
        }
    }
);

// Estimar o custo de execução, em termos de memória, do algoritmo de similaridade de nós
// https://neo4j.com/docs/graph-data-science/current/algorithms/node-similarity/#algorithms-node-similarity-examples-memory-estimation
CALL gds.nodeSimilarity.write.estimate('myGraph', {
  writeRelationshipType: 'SIMILAR',
  writeProperty: 'score'
})
YIELD nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory

// No modo stream de execução, o algoritmo retorna a pontuação de similaridade para cada relacionamento. 
// Isso nos permite inspecionar os resultados diretamente ou pós-processá-los no Cypher sem nenhum efeito colateral.
// https://neo4j.com/docs/graph-data-science/current/algorithms/node-similarity/#algorithms-node-similarity-examples-stream
CALL gds.nodeSimilarity.stream('myGraph')
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).SoftInfoId AS SoftInfo1, gds.util.asNode(node2).SoftInfoId AS SoftInfo2, similarity
ORDER BY similarity DESCENDING, SoftInfo1, SoftInfo2


